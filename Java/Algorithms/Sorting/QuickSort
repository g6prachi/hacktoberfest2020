// function for quick sort 
public static void quickSort(int[] arr) {
	quickSort(arr, 0, arr.length - 1);
}

//helper function for the main function
// si - start index
// ei - end index
public static void quickSort(int[] arr, int si, int ei) {
		// base case
		if (si >= ei) {
			return;
		}

		// pivot
		int pivot = arr[si];

		// find pivot position
		int count = 0;
		for (int i = si + 1; i <= ei; i++) {
			if (arr[i] <= pivot) {
				count++;
			}
		}
		int pivotPos = si + count;

		// place pivot
		arr[si] = arr[pivotPos];
		arr[pivotPos] = pivot;

		// ensure pivot position
		int i = si, j = ei;
		while (i < pivotPos && j > pivotPos) {
			if (arr[i] > pivot && arr[j] <= pivot) {
				int temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
				i++;
				j--;
			}
			if (arr[j] > pivot) {
				j--;
			}
			if (arr[i] <= pivot) {
				i++;
			}
		}

    // recursive calls
		quickSort(arr, si, pivotPos - 1);
		quickSort(arr, pivotPos + 1, ei);
	}
